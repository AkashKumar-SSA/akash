#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *left;
    struct node *right;
};

struct node *createnode(int data)
{
    struct node *n=(struct node*)malloc(sizeof(struct node));
    n->left=NULL;
    n->right=NULL;
    n->data=data;
    return n;
}

void inOrder(struct node *root)
{
    if(root!=NULL)
    {
        inOrder(root->left);
        printf("%d ",root->data);
        inOrder(root->right);
    }
}
/*
void insertion(struct node* root,int val)
{
    struct node *prev=NULL;
    while(root!=NULL)
    {
        prev=root;
        if(root->data==val)
        {
            printf("The number already exist in the tree");
            return ;
        }
        if(root->data>val)
        {
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }

    struct node * newnode=createnode(val);
    if(val<prev->data)
    {
        prev->left=newnode;
    }
    else
    {
        prev->right=newnode;
    }
}
*/
void delete(struct node*root,int val)
{
    struct node*prev;
    if(search(root,prev,val))
    {
        
    }
    else
    {
        printf("\nThe number is not found");
    }

}

int search(struct node * root,struct node * prev,int val)
{
    while(root!=NULL)
    {
        
        if(root->data==val)
        {
            printf("\nThe number %d  is found in the tree",root->data);
            return 1;
        }

        if(root->data > val)
        {
            root=root->left;
        }
        if(root->data < val)
        {
            root=root->right;
        }
    }
    if(root==NULL)
    {
        //printf("\nThe number is not found");
        return 0;
    }
    return 0;
}
int main() 
{   
    struct node *p =createnode(5);
    struct node *p1=createnode(3);
    struct node *p2=createnode(7);
    struct node *p3=createnode(2);
    struct node *p4=createnode(4);
    struct node *p5=createnode(6);
    struct node *p6=createnode(8);
    struct node *p7=createnode(1);

    p->left=p1;
    p->right=p2;

    p1->left=p3;
    p1->right=p4;

    p2->left=p5;
    p2->right=p6;

    p3->left=p7;

    /* The tree originally looks like
                   5                         p
                 /   \                     /   \
                3      7                 p1      p2
              /  \    /  \              /  \    /  \
             2    4  6    8            p3   p4 p5   p6
            /                         /
           1                        p7
           
   */

    printf("\n\nTHE RESULT OF INORDER TRAVERSAL:\n");
    inOrder(p);
    printf("\n\n");

    int val; 
    printf("Enter a number to delete from the binaty search tree:");
    scanf("%d",&val);
    printf("\n\n");
    deletion(p,val);

    printf("\n\nTHE RESULT OF INORDER TRAVERSAL after deletion:\n");
    inOrder(p);
    printf("\n\n");
    return 0;
}
